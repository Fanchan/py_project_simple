class GameObject:
    class_name = ""
    desc = ""
    objects = {}

    def __init__(self, name):
        self.name = name
        GameObject.objects[self.class_name] = self
    def get_desc(self):
        return self.class_name + "\n" + self.desc
class Goblin(GameObject):
    def __init__(self, name):
        self.class_name = "goblin"
        self.health = 3
        self._desc = "little green mushrums"
        super().__init__(name)
@property
def desc(self):
    if self.health >=3:
        return self._desc
    elif self.health == 2:
        health_line = "blood out"
    elif self.health == 1:
        health_line = "arm cut off"
    elif self.health <= 0:
        health_line = "dead"
    return self._desc + "\n" + health_line

@desc.setter
def desc(self, value):
     self._desc = value

def hit(noun):
    if noun in GameObject.objects:
        thing = GameObject.objects[noun]
        if type(thing) == Goblin:
            thing.health = thing.health - 1
            if thing.health <=0:
                msg = "you kill mushrums"
            else:
                msg = "you hit the {}".format(thing.class_name)
        else:
            msg = "there is no {} here".format(noun)
        return msg

goblin = Goblin("Gobbly")

def examine(noun):
    if noun in GameObject.objects:
        return GameObject.objects[noun].get_desc()
    else:
        return "There is no {} here".format(noun)

def get_input():
    command = input(": ").split()
    verb_world = command[0]
    if verb_world in verb_dict:
        verb = verb_dict[verb_world]
    else:
        print("Unknown verb {}".format(verb_world))
        return

    if len(command) >=2:
        noun_word = command[1]
        print (verb(noun_word))
    else:
        print(verb())

def say(noun):
    return 'You said "{}"'.format(noun)

verb_dict = {"say": say,
             "examine": examine,
             "hit": hit,
}



while True:
    get_input()
